##############################################################################
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################


# This workflow runs in both the trusted base repository at
# https://www.github.com/FAIR-GROUND/App/actions as well as in
# any forks that have enabled actions. The latter workflow
# will build the app and create a release in the fork's repository,
# while the workflow in the base repository will
# build the app a second time in a trusted environment and,
# if the two binaries match, publish a `fairseal` hash of
# the release artifacts for verification by the App Fair catalog
# browser app, as well as optionally publish the app to external channels.
#
# See https://www.appfair.net for more details.
name: "fair-ground"

env:
  FAIRGROUND: "appfair"
  APP_TARGET: "AppFairApp"
  PREFLIGHT_BUNDLE_PREFIX: "org.appfair"
  FAIRGROUND_LAUNCHPAD: "https://appfair.app/fair?app="
  HUB_REPO: "github.com"
  HUB_PAGE: "github.io"
  FAIRTOOL: "fairtool"
  # fairtool-head will build from source, which adds a few minutes
  #FAIRTOOL: "fairtool-head"

on:
  workflow_call:
    inputs:
      # the name of the fairground organization (e.g., "appfair")
      fairground:
        required: false
        type: string
        default: appfair
      # the name of the bot that posts fairseals to PRs that pass integration
      fairseal_issuer:
        required: false
        type: string
      # the license that fairground projects must adhere to
      license:
        required: false
        type: string
        default: AGPL-3.0
      # whether to create macOS products
      target_macos:
        type: boolean
        required: false
        default: true
      # whether to create iOS products
      target_ios:
        type: boolean
        required: false
        default: true
      # whether to create tvOS products
      target_tvos:
        type: boolean
        required: false
        default: false
      # whether to create watchOS products
      target_watchos:
        type: boolean
        required: false
        default: false
      # whether to create linux products
      target_linux:
        type: boolean
        required: false
        default: false
      # whether to create windows products
      target_windows:
        type: boolean
        required: false
        default: false

    secrets:
      # Fork-Apply secrets
      NOTARY_TEAMID:
        required: false
      NOTARY_USERID:
        required: false
      NOTARY_PASSWORD:
        required: false
      NOTARY_CERTKEY_P12_BASE64:
        required: false
      NOTARY_CERTKEY_PASSWORD:
        required: false

      # Integrate-Release secrets
      APP_FAIR_BOT_TOKEN:
        required: false
      APP_FAIR_ALLOW_NAME:
        required: false
      APP_FAIR_DENY_NAME:
        required: false
      APP_FAIR_ALLOW_FROM:
        required: false
      APP_FAIR_DENY_FROM:
        required: false
      APP_FAIR_FAIRSEAL_KEY:
        required: false

      TESTFLIGHT_TEAMID:
        required: false
      TESTFLIGHT_ISSUER_ID:
        required: false
      TESTFLIGHT_KEY_ID:
        required: false
      TESTFLIGHT_KEY_CONTENTS:
        required: false
      TESTFLIGHT_CODESIGNING_IDENTITY:
        required: false

jobs:
  # The Fork-Apply phases run in the /App.git fork's repository.
  # This workflow builds and validates the app, and if a semver tag 
  # tag is pushed, it will also create a release and publish the artifacts.
  # Released artifacts will only be published in the App Fair catalog
  # once the Integrate-Release phases (below) are successfully run
  # and a fairseal is published.
  fork_apply:
    name: "Fork Apply"
    if: inputs.fairseal_issuer == '' && github.repository_owner != 'appfair'
    runs-on: macos-12
    timeout-minutes: 30
    steps:
      - name: "Initialize fair-ground"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
          echo "ORGNAME=${{ github.repository_owner }}" >> $GITHUB_ENV
          echo "APPNAME=$(echo ${{ github.repository_owner }} | sed 's;^${{ env.FAIRGROUND }}$;App-Name;g')" >> $GITHUB_ENV
          echo "COMMITHASH=${{ github.sha }}" >> $GITHUB_ENV

      - name: "Configure Fork: ${{ env.APPNAME }}"
        run: |
          echo "PRODUCT_NAME=$(echo ${{ env.APPNAME }} | tr '-' ' ')" >> $GITHUB_ENV
          echo "FAIR_APP_ARTIFACT=${{ env.APPNAME }}" >> $GITHUB_ENV
          echo "BUNDLE_ID=app.$(echo ${{ env.APPNAME }})" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: "Configure Deployment Platforms"
        id: platforms
        run: |
          echo "::set-output name=macos::$(xcodebuild -workspace App.xcworkspace -showBuildSettings -quiet -json -scheme $APP_TARGET archive 2>/dev/null | jq '.[].buildSettings.SUPPORTED_PLATFORMS' | grep 'macosx' > /dev/null && echo enabled || echo disabled)"
          echo "::set-output name=ios::$(xcodebuild -workspace App.xcworkspace -showBuildSettings -quiet -json -scheme $APP_TARGET archive 2>/dev/null | jq '.[].buildSettings.SUPPORTED_PLATFORMS' | grep 'iphoneos' > /dev/null && echo enabled || echo disabled)"

      - name: "Resolve Swift Packages"
        run: |
          swift package resolve
          cp Package.resolved Sources/App/Resources/

      - name: "Install ${{ env.FAIRTOOL }}"
        run: |
          brew install fair-ground/tool/$FAIRTOOL
          $FAIRTOOL version

      - name: "Check Version"
        id: get_semver_tag
        run: echo ::set-output name=semver_tag::$(xcodebuild -quiet -workspace ReleasePR/App.xcworkspace -showBuildSettings -json -scheme "${{ env.APP_TARGET }}" archive 2> /dev/null | jq -r '.[].buildSettings.MARKETING_VERSION')

      - name: "Validate App: ${{ env.ORGNAME }} ${{ steps.get_semver_tag.outputs.semver_tag }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # needed to be able to ad-hoc codesign embedded frameworks
          plutil -replace 'com\.apple\.security\.cs\.disable-library-validation' -bool true sandbox-macos.entitlements
          $FAIRTOOL fair validate --verbose --hub "github.com/${{ inputs.fairground }}" --org "${{ env.ORGNAME }}" --base . --project . --fair-properties "$FAIRGROUND.xcconfig" --allow-license "AGPL-3.0"

      # Verifies that pages are enabled for this repository
      - name: "Check Repository Page: https://${{ env.ORGNAME }}.github.io/App"
        run: curl --location --fail -s "${{ env.ORGNAME }}.github.io/App" | grep "$FAIRGROUND_LAUNCHPAD""${{ env.ORGNAME }}"

      - name: "Generate Icon"
        run: |
          $FAIRTOOL fair icon --org "${{ env.ORGNAME }}" --fair-properties $FAIRGROUND.xcconfig --accent-color Assets.xcassets/AccentColor.colorset/Contents.json --app-icon Assets.xcassets/AppIcon.appiconset/Contents.json

      # Create a new release for this tag
      - name: "Create Release"
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating release: ${GITHUB_REF#refs/tags/}"
          # create a pre-release if it doesn't already exist 
          gh release create "${GITHUB_REF#refs/tags/}" --prerelease --title "Release ${GITHUB_REF#refs/tags/}" --generate-notes || true

      - name: "Build iOS App"
        if: inputs.target_ios == true && steps.platforms.outputs.ios == 'enabled'
        run: |
          xcodebuild archive \
            -workspace "App.xcworkspace" \
            -jobs 1 \
            -configuration Release \
            -scheme "${{ env.APP_TARGET }}" \
            -sdk "iphoneos" \
            -archivePath "staging/.${{ env.FAIR_APP_ARTIFACT }}-iOS.xcarchive" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            AD_HOC_CODE_SIGNING_ALLOWED=YES \
            CODE_SIGN_IDENTITY="-" \
            FAIRAPP_PRODUCT_NAME="${PRODUCT_NAME}"

          cp -a "staging/.${{ env.FAIR_APP_ARTIFACT }}-iOS.xcarchive/Products/Applications" "staging/Payload"
          ditto -c -k --sequesterRsrc --keepParent "staging/Payload" "${{ env.FAIR_APP_ARTIFACT }}-iOS.ipa"

      - name: "Upload iOS Release"
        if: inputs.target_ios == true && steps.platforms.outputs.ios == 'enabled' && startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "${GITHUB_REF#refs/tags/}" -- "${{ env.FAIR_APP_ARTIFACT }}-iOS.ipa"

      - name: "Build macOS App"
        if: inputs.target_macos == true && steps.platforms.outputs.macos == 'enabled'
        run: |
          xcodebuild archive \
            -workspace "App.xcworkspace" \
            -jobs 1 \
            -configuration Release \
            -scheme "${{ env.APP_TARGET }}" \
            -sdk "macosx" \
            -destination "platform=macOS" \
            -archivePath "staging/.${{ env.FAIR_APP_ARTIFACT }}-macOS.xcarchive" \
            CODE_SIGNING_REQUIRED=YES \
            CODE_SIGNING_ALLOWED=YES \
            AD_HOC_CODE_SIGNING_ALLOWED=YES \
            CODE_SIGN_IDENTITY="-" \
            DEVELOPMENT_TEAM="" \
            CODE_SIGN_IDENTITY="-" \
            OTHER_CODE_SIGN_FLAGS="--deep --timestamp=none" \
            OTHER_LIBTOOLFLAGS="-D" \
            FAIRAPP_PRODUCT_NAME="${PRODUCT_NAME}"

          echo '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>method</key><string>mac-application</string><key>signingStyle</key><string>automatic</string><key>uploadBitcode</key><false/><key>compileBitcode</key><false/><key>uploadSymbols</key><false/></dict></plist>' > "staging/.exportOptions.plist"

          xcodebuild \
            -exportArchive \
            -archivePath "staging/.${{ env.FAIR_APP_ARTIFACT }}-macOS.xcarchive" \
            -exportPath "staging/" \
            -exportOptionsPlist "staging/.exportOptions.plist"

          codesign --verify --verbose=5 "staging/${PRODUCT_NAME}.app"
          codesign -dv --verbose=5 "staging/${PRODUCT_NAME}.app"
          codesign -d --entitlements - "staging/${PRODUCT_NAME}.app"

          # create the zip file
          ditto -c -k --sequesterRsrc --keepParent "staging/${PRODUCT_NAME}.app" "${{ env.FAIR_APP_ARTIFACT }}-macOS.zip"

      # Notarization is not required for the App Fair, but a developer
      # can opt to notarize their own build which will allow them to 
      # distribute the app outside of the App Fair without having to
      # make a separate notarized release.
      #
      # The fairground's app validation does not take into account the
      # notarization or signing status of the zip when it validates
      # the release artifacts, nor does it have access to the signing
      # secrets for the fork's repository, and so the app can be signed
      # with any certificate without affecting
      # the integration-release validation. 
      #
      # To enable signing and notarization, the fork's secrets will
      # need to be setup to include the following keys:
      #
      # NOTARY_USERID: The Apple ID for developer ID
      # NOTARY_PASSWORD: An app-specific password for the developer
      # NOTARY_TEAMID: The Team ID associated with the developer
      # NOTARY_CERTKEY_P12_BASE64: The exported certificate and key (see below)
      # NOTARY_CERTKEY_PASSWORD: The password for the exported certificate
      #
      # To obtain the NOTARY_CERTKEY_P12_BASE64 value,
      # you'll need to request a certificate from Apple, 
      # import it into the Keychain, and then export is as a .p12
      # file, which will be base64 encoded and saved into the GitHub secret.
      #
      # First get a Developer ID certificate by logging into your 
      # developer account and selecting Certificates IDs & Profiles,
      # then create a new Developer ID Application certificate.
      #
      # To get a CSR Keychain Access and going to
      # Certificate Assistant -> Request a Certificate from a Certificate Authority
      # and ensure the "CA Email Address" matches the developer e-mail,
      # then save to disk.
      # Then upload the CSR request file to the portal and it will
      # create a new certificate for you. 
      # Download it and add it to your Keychain Access by opening it. 
      # The certificate should be added to one of your default keychains 
      # and not to the system keychain;
      # otherwise you might later have troubles exporting it.
      #
      # The signing data can then be exported from Keychain Access.app by 
      # going to the "Certificates" tab and finding the 
      # "Developer ID Application: DEVNAME (DEVID)" entry that has a single
      # child private key named "Mac Developer ID Application: DEVNAME".
      #
      # Select **BOTH** items and right-click select "Export 2 Items…".
      # Export to "Certificates.p12" and select a password.
      # Create a GitHub Org secret called 
      # "NOTARIZATION_SIGNING_PASSWORD" with the value of that password.
      #
      # Next copy the "NOTARY_CERTKEY_P12_BASE64" to the clipboard with:
      #
      #   `base64 Certificates.p12 | pbcopy`
      #
      # In your GitHub organization Secrets settings, paste the value
      # into a "NOTARY_CERTKEY_P12_BASE64" key.
      #
      # Reference: https://localazy.com/blog/how-to-automatically-sign-macos-apps-using-github-actions
      - name: "Check Notarization Keys"
        id: notarization_setup
        env:
            NOTARY_TEAMID: ${{ secrets.NOTARY_TEAMID }}
        if: env.NOTARY_TEAMID != ''
        # transfer the secret to an env variable so it can be checked with `if`
        run: echo "::set-output name=defined::true"

      - name: "Notarize App"
        if: steps.notarization_setup.outputs.defined == 'true'
        run: |
          security delete-keychain fairsign.keychain || true
          security create-keychain -p "${{ secrets.NOTARY_CERTKEY_PASSWORD }}" fairsign.keychain
          security default-keychain -s fairsign.keychain
          security list-keychains -s fairsign.keychain

          # import certificate
          mkdir -p .notarization
          echo "${{ secrets.NOTARY_CERTKEY_P12_BASE64 }}" | base64 -d -o .notarization/certificate.p12
          security import .notarization/certificate.p12 -k fairsign.keychain -A -P "${{ secrets.NOTARY_CERTKEY_PASSWORD }}"
          rm -rf .notarization

          security set-key-partition-list -S "apple-tool:,apple:,codesign:" -s -k "${{ secrets.NOTARY_CERTKEY_PASSWORD }}" fairsign.keychain

          # show valid identities
          security find-identity -v

          # re-sign the app with the imported certificate and the identity
          codesign --force --deep -v --options runtime --entitlements "sandbox-macos.entitlements" -s "`security find-identity -v | cut -f 4 -d ' ' | head -n 1`" "staging/${PRODUCT_NAME}.app"

          # re-create the archive with the signed app for submission
          ditto -c -k --sequesterRsrc --keepParent "staging/${PRODUCT_NAME}.app" "${{ env.FAIR_APP_ARTIFACT }}-macOS.zip"

          # perform notarization and wait for success
          xcrun notarytool submit --wait --progress --apple-id "${{ secrets.NOTARY_USERID }}" --password "${{ secrets.NOTARY_PASSWORD }}" --team-id "${{ secrets.NOTARY_TEAMID }}" "${{ env.FAIR_APP_ARTIFACT }}-macOS.zip"

          # staple the notarization ticket to the app
          xcrun stapler staple "staging/${PRODUCT_NAME}.app"

          # re-create the archive with the signed & stapled artifact
          ditto -c -k --sequesterRsrc --keepParent "staging/${PRODUCT_NAME}.app" "${{ env.FAIR_APP_ARTIFACT }}-macOS.zip"

      - name: "Upload macOS Release"
        if: inputs.target_macos == true && steps.platforms.outputs.macos == 'enabled' && startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "${GITHUB_REF#refs/tags/}" -- "${{ env.FAIR_APP_ARTIFACT }}-macOS.zip"

      - name: "Upload Release Assets"
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Extract the Info.plist from the archives themselves, since they contain
        # the same post-processed metadata that the app will use.
        # Convert plists to XML for easier parsing.
        run: |
          cp Assets.xcassets/AppIcon.appiconset/appicon-iphone-60x60@3x.png staging/"${{ env.FAIR_APP_ARTIFACT }}.png"
          cp App.yml COPYING.txt README.md LICENSE.txt Info.plist sandbox-macos.entitlements sandbox-ios.entitlements Package.resolved staging/
          cp docs/screenshots/screenshot*-[0-9]*x[0-9]*.png staging/ || true
          cp docs/screenshots/screenshot*-[0-9]*x[0-9]*.jpg staging/ || true
          ls -la staging/

          rm -rf staging/*.app # need to cleanup app
          # find staging/ -type d -maxdepth 1 -exec rm -rf {} \; # remove directories from staging

          # log the checksum for each of the staging elements
          openssl sha256 staging/*.*
          echo "Uploading release assets: ${GITHUB_REF#refs/tags/}"

          # upload staging assets to the existing GitHub release
          gh release upload "${GITHUB_REF#refs/tags/}" -- staging/*.*




  # The Integrate-Release phases run in the trusted base fairground.
  # This workflow validates and re-builds the app, and if the artifact hash
  # matches that of the public release, it will publish the fairseal
  # required for inclusion in the catalog.  
  integrate_release:
    name: "Integrate Release"
    if: github.repository_owner == 'appfair'
    runs-on: macos-12
    timeout-minutes: 30
    steps:
      - name: "Initialize fair-ground"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"

          echo "PRTITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV
          echo "ORGNAME=${{ github.event.pull_request.head.user.login }}" >> $GITHUB_ENV
          echo "COMMITHASH=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          echo "PRID=${{ github.event.pull_request.id }}" >> $GITHUB_ENV

      - name: "Configure App: ${{ env.ORGNAME }}"
        run: |
          echo "FAIR_APP_ARTIFACT=${{ env.ORGNAME }}" >> $GITHUB_ENV
          echo "PRODUCT_NAME=$(echo ${{ env.ORGNAME }} | tr '-' ' ')" >> $GITHUB_ENV
          echo "BUNDLE_ID=app.$(echo ${{ env.ORGNAME }})" >> $GITHUB_ENV

      - name: "Checkout Base Fairground"
        uses: actions/checkout@v2

      - name: "Checkout Integration Pull Request"
        uses: actions/checkout@v2
        with:
          path: ReleasePR
          ref: ${{ env.COMMITHASH }}
          fetch-depth: 0
          submodules: false

      #- name: Verify workflow integrity
      # the workflows must be identical; fetch & merge upstream if this fails
      #run: |
      # workflows may not be modified
      #diff -r .github/workflows/ ReleasePR/.github/workflows/

      - name: "Install ${{ env.FAIRTOOL }}"
        run: |
          brew install fair-ground/tool/$FAIRTOOL
          $FAIRTOOL version

      - name: "Check Version"
        id: get_semver_tag
        run: echo ::set-output name=semver_tag::$(xcodebuild -quiet -workspace ReleasePR/App.xcworkspace -showBuildSettings -json -scheme "${{ env.APP_TARGET }}" archive 2> /dev/null | jq -r '.[].buildSettings.MARKETING_VERSION')

      - name: "Validate App: ${{ env.PRTITLE }}"
        env:
          GITHUB_TOKEN: ${{ secrets.APP_FAIR_BOT_TOKEN }}
        run: |
          # needed to be able to ad-hoc codesign embedded frameworks
          plutil -replace 'com\.apple\.security\.cs\.disable-library-validation' -bool true ReleasePR/sandbox-macos.entitlements
          $FAIRTOOL fair validate \
            --base . \
            --project ReleasePR \
            --hub github.com/${{ inputs.fairground }} \
            --base-repo "App" \
            --org "${{ env.ORGNAME }}" \
            --ref "${{ env.COMMITHASH }}" \
            --integration-title "${{ env.PRTITLE }}" \
            --fair-properties "$FAIRGROUND.xcconfig" \
            --fairseal-issuer "${{ inputs.fairseal_issuer }}" \
            --fairseal-key "${{ secrets.APP_FAIR_FAIRSEAL_KEY }}" \
            --allow-name "${{ secrets.APP_FAIR_ALLOW_NAME }}" \
            --deny-name "${{ secrets.APP_FAIR_DENY_NAME }}" \
            --allow-from "${{ secrets.APP_FAIR_ALLOW_FROM }}" \
            --deny-from "${{ secrets.APP_FAIR_DENY_FROM }}" \
            --verbose

      - name: "Integrate PR"
        env:
          GITHUB_TOKEN: ${{ secrets.APP_FAIR_BOT_TOKEN }}
        run: |
          rm -rf "staging/"
          mkdir "staging/"

          # store the PR in the build archive
          cp -a ReleasePR "staging/"

          $FAIRTOOL fair merge --verbose --hub "github.com/${{ inputs.fairground }}" --org "${{ env.ORGNAME }}" --base . --project ReleasePR --fair-properties "$FAIRGROUND.xcconfig" --output .

          file Assets.xcassets/AppIcon.appiconset/*.*

          # needed to be able to ad-hoc codesign embedded frameworks
          plutil -replace 'com\.apple\.security\.cs\.disable-library-validation' -bool true sandbox-macos.entitlements

          $FAIRTOOL fair validate --hub "github.com/${{ inputs.fairground }}" --org "${{ env.ORGNAME }}" --base . --project . --fair-properties "$FAIRGROUND.xcconfig" --allow-license "AGPL-3.0"

          xcrun swift package resolve
          cp -a .build/checkouts Dependencies
          tar cvzf "staging/${{ env.FAIR_APP_ARTIFACT }}-source.tgz" --exclude='.git/' --exclude='.build/' --exclude='staging/' .
          rm -rf Dependencies

          xcrun swift package resolve
          cat Package.resolved # useful for the log
          cp Package.resolved Sources/App/Resources/ # embed in the app

      # Verifies that pages are enabled for the forked repository
      - name: "Check Repository Page: https://${{ env.ORGNAME }}.github.io/App"
        run: curl --location --fail -s "${{ env.ORGNAME }}.github.io/App" | grep "$FAIRGROUND_LAUNCHPAD""${{ env.ORGNAME }}"

      - name: "Configure Deployment Platforms"
        id: platforms
        run: |
          echo "::set-output name=macos::$(xcodebuild -workspace App.xcworkspace -showBuildSettings -quiet -json -scheme $APP_TARGET archive 2>/dev/null | jq '.[].buildSettings.SUPPORTED_PLATFORMS' | grep 'macosx' > /dev/null && echo enabled || echo disabled)"
          echo "::set-output name=ios::$(xcodebuild -workspace App.xcworkspace -showBuildSettings -quiet -json -scheme $APP_TARGET archive 2>/dev/null | jq '.[].buildSettings.SUPPORTED_PLATFORMS' | grep 'iphoneos' > /dev/null && echo enabled || echo disabled)"

      - name: "Generate Icon"
        run: |
          $FAIRTOOL fair icon --org "${{ env.ORGNAME }}" --fair-properties "$FAIRGROUND.xcconfig" --accent-color Assets.xcassets/AccentColor.colorset/Contents.json --app-icon Assets.xcassets/AppIcon.appiconset/Contents.json

      - name: "Stage Release Metadata"
        # copy over the un-processed assets from the ReleasePR/
        run: |
          cp README.md staging/
          cp LICENSE.txt staging/
          cp COPYING.txt staging/

          cp App.yml staging/
          cp Package.resolved staging/
          cp Info.plist staging/
          cp sandbox-macos.entitlements staging/
          cp sandbox-ios.entitlements staging/

          cp Assets.xcassets/AppIcon.appiconset/appicon-iphone-60x60@3x.png staging/"${{ env.FAIR_APP_ARTIFACT }}.png"
          cp docs/screenshots/screenshot*-[0-9]*x[0-9]*.png staging/ || true
          cp docs/screenshots/screenshot*-[0-9]*x[0-9]*.jpg staging/ || true

          ls -la staging/
          # log the checksum for each of the staging elements
          shasum -a 256 staging/*.*

      - name: "Check PreFlight Eligibility"
        id: preflight
        if: env.TESTFLIGHT_TEAMID != ''
        env:
          TESTFLIGHT_TEAMID: ${{ secrets.TESTFLIGHT_TEAMID }}
        run: |
          echo "::set-output name=defined::true"
          # check the 'TESTFLIGHT_APP_ID' key in $FAIRGROUND.xcconfig
          echo "::set-output name=appid::$(xcodebuild -workspace App.xcworkspace -showBuildSettings -quiet -json -scheme $APP_TARGET archive 2>/dev/null | jq -r '.[].buildSettings.TESTFLIGHT_APP_ID')"


      - name: "Build iOS App"
        if: inputs.target_ios == true && steps.platforms.outputs.ios == 'enabled'
        run: |
          xcodebuild archive \
            -workspace "App.xcworkspace" \
            -jobs 1 \
            -configuration Release \
            -scheme "${{ env.APP_TARGET }}" \
            -sdk "iphoneos" \
            -archivePath "staging/.${{ env.FAIR_APP_ARTIFACT }}-iOS.xcarchive" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            AD_HOC_CODE_SIGNING_ALLOWED=YES \
            CODE_SIGN_IDENTITY="-" \
            FAIRAPP_PRODUCT_NAME="${PRODUCT_NAME}"

          cp -a "staging/.${{ env.FAIR_APP_ARTIFACT }}-iOS.xcarchive/Products/Applications" "staging/Payload"
          ditto -c -k --sequesterRsrc --keepParent "staging/Payload" "staging/${{ env.FAIR_APP_ARTIFACT }}-iOS.ipa"

      - name: "Generate iOS fairseal"
        if: inputs.target_ios == true && steps.platforms.outputs.ios == 'enabled'
        env:
          GITHUB_TOKEN: ${{ secrets.APP_FAIR_BOT_TOKEN }}
        run: |
          # build the URL for the GitHub download artifact
          IPAURL="https://github.com/${{ env.ORGNAME }}/App/releases/download/${{ steps.get_semver_tag.outputs.semver_tag }}/${{ env.FAIR_APP_ARTIFACT }}-iOS.ipa" 

          echo "Generating fairseal for: $IPAURL"

          mkdir -p staging/.artifact_stash/
          mv -f staging/*.zip staging/.artifact_stash/ || true # don't seal the macOS zip for iOS seal

          mkdir -p staging/untrusted/

          $FAIRTOOL fair fairseal \
            --verbose \
            --hub "github.com/${{ inputs.fairground }}" \
            --base-repo "App" \
            --token "${{ secrets.APP_FAIR_BOT_TOKEN }}" \
            --org "${{ env.ORGNAME }}" \
            --fairseal-key "${{ secrets.APP_FAIR_FAIRSEAL_KEY }}" \
            --trusted-artifact "staging/${{ env.FAIR_APP_ARTIFACT }}-iOS.ipa" \
            --untrusted-artifact "staging/untrusted/${{ env.FAIR_APP_ARTIFACT }}-iOS.ipa" \
            --disassembler=/usr/bin/otool \
            --permitted-diffs 0 \
            --retry-duration 600 \
            --artifact-url "$IPAURL" \
            --artifact-staging "staging/" \
            --fair-properties "$FAIRGROUND.xcconfig" \
            --accent-color "Assets.xcassets/AccentColor.colorset/Contents.json" \
            --project .

          mv -f staging/.artifact_stash/* staging/ || true # restore stash


      - name: "Prepare PreFlight"
        if: env.TESTFLIGHT_TEAMID != null && env.TESTFLIGHT_TEAMID != '' && steps.preflight.outputs.appid > 0
        env:
          GITHUB_TOKEN: ${{ secrets.APP_FAIR_BOT_TOKEN }}
          TESTFLIGHT_TEAMID: ${{ secrets.TESTFLIGHT_TEAMID }}
          TESTFLIGHT_ISSUER_ID: ${{ secrets.TESTFLIGHT_ISSUER_ID }}
          TESTFLIGHT_KEY_ID: ${{ secrets.TESTFLIGHT_KEY_ID }}
          TESTFLIGHT_KEY_CONTENTS: ${{ secrets.TESTFLIGHT_KEY_CONTENTS }}
          TESTFLIGHT_CODESIGNING_IDENTITY: ${{ secrets.TESTFLIGHT_CODESIGNING_IDENTITY }}
        run: |
          # Setup the keychain and import the signing cert
          security delete-keychain appstore.keychain || true
          security create-keychain -p "${{ secrets.TESTFLIGHT_CERTKEY_PASSWORD }}" appstore.keychain
          security default-keychain -s appstore.keychain
          security list-keychains -s appstore.keychain

          # import certificate
          mkdir -p .signing
          echo "${{ secrets.TESTFLIGHT_CERTKEY_P12_BASE64 }}" | base64 -d -o .signing/certificate.p12
          security import .signing/certificate.p12 -k appstore.keychain -A -P "${{ secrets.TESTFLIGHT_CERTKEY_PASSWORD }}"
          rm -rf .signing

          security set-key-partition-list -S "apple-tool:,apple:,codesign:" -s -k "${{ secrets.TESTFLIGHT_CERTKEY_PASSWORD }}" appstore.keychain

          # show valid identities
          security find-identity -v

          mkdir -p fastlane/metadata/

          cat > fastlane/Fastfile << EOF

          lane :setup do
            setup_ci if ENV['CI']
            app_store_connect_api_key({
              key_id: ENV['TESTFLIGHT_KEY_ID'],
              issuer_id: ENV['TESTFLIGHT_ISSUER_ID'],
              key_content: ENV['TESTFLIGHT_KEY_CONTENTS'],
            })
          end

          lane :provision do
            setup
            get_provisioning_profile({
              platform: ENV['FASTLANE_PROFILE_PLATFORM'],
              app_identifier: "${PREFLIGHT_BUNDLE_PREFIX}.${BUNDLE_ID}",
              force: true,
              fail_on_name_taken: false,
              filename: "fastlane/embedded.mobileprovision"
            })
            update_project_provisioning({
              xcodeproj: "project.xcodeproj",
            })
          end

          lane :metadata do
            deliver({
              force: true,
              skip_metadata: false,
              skip_screenshots: true,
              skip_binary_upload: true,
              submit_for_review: false,
              automatic_release: false,
            })
          end

          lane :beta do
            setup
            provision
            #metadata
            upload_to_testflight({
              ipa: "staging/rebundled/${FAIR_APP_ARTIFACT}-iOS.ipa",
              skip_submission: false,
              skip_waiting_for_build_processing: true,
            })
          end
          EOF

          # copy over the app icon
          cp -v "staging/${FAIR_APP_ARTIFACT}.png" fastlane/metadata/app_icon.png

          mkdir -p fastlane/screenshots/
          cp docs/screenshots/screenshot*-[0-9]*x[0-9]*.png fastlane/screenshots/ || true
          # tolerate absent screenshots
          rmdir fastlane/screenshots/ || true 

          # Export the metadata from the App.yml into fastlane's metadata folder
          mkdir -p fastlane/metadata/

          # set some default review metadata
          echo "https://github.com/${ORGNAME}/App/discussions" > fastlane/metadata/support_url.txt
          echo "https://${ORGNAME}.github.io/App" > fastlane/metadata/marketing_url.txt

          #mkdir -p fastlane/metadata/review_information
          #echo "App" > fastlane/metadata/review_information/first_name.txt
          #echo "Fair" > fastlane/metadata/review_information/last_name.txt
          #echo "appfair@appfair.org" > fastlane/metadata/review_information/email_address.txt
          #echo "appfair@appfair.org" > fastlane/metadata/review_information/phone_number.txt

          $FAIRTOOL fair metadata --export fastlane/metadata App.yml

      - name: "PreFlight iOS"
        if: inputs.target_ios == true && steps.platforms.outputs.ios == 'enabled' && env.TESTFLIGHT_TEAMID != null && env.TESTFLIGHT_TEAMID != '' && steps.preflight.outputs.appid > 0
        env:
          GITHUB_TOKEN: ${{ secrets.APP_FAIR_BOT_TOKEN }}
          TESTFLIGHT_TEAMID: ${{ secrets.TESTFLIGHT_TEAMID }}
          TESTFLIGHT_ISSUER_ID: ${{ secrets.TESTFLIGHT_ISSUER_ID }}
          TESTFLIGHT_KEY_ID: ${{ secrets.TESTFLIGHT_KEY_ID }}
          TESTFLIGHT_KEY_CONTENTS: ${{ secrets.TESTFLIGHT_KEY_CONTENTS }}
          TESTFLIGHT_CODESIGNING_IDENTITY: ${{ secrets.TESTFLIGHT_CODESIGNING_IDENTITY }}
          FASTLANE_PROFILE_PLATFORM: ios
          FASTLANE_DESTINATION: generic/platform=iOS
          PLATFORM_NAME: iphoneos
          SUPPORTED_PLATFORMS: iphoneos
          CI: true
        run: |
          # acquire embedded.mobileprovision
          fastlane provision --verbose

          #$FAIRTOOL app rebundle --export fastlane/metadata App.yml

          # Re-sign the validated ipa
          mkdir staging/rebundled/
          cd staging/rebundled/

          # Extract the untrusted ipa we downloaded for the fairseal
          unzip -q "../untrusted/${FAIR_APP_ARTIFACT}-iOS.ipa"

          # Re-parent the bundle ID with the prefix
          # TODO: need to also replace all extension bundle IDs
          plutil -replace 'CFBundleIdentifier' -string "${PREFLIGHT_BUNDLE_PREFIX}.${BUNDLE_ID}" "Payload/${PRODUCT_NAME}.app/Info.plist"

          cp "../../fastlane/embedded.mobileprovision" "Payload/${PRODUCT_NAME}.app/embedded.mobileprovision"

          # sign both the frameworks and the parent app
          SIGNID=$(security find-identity -v | cut -f 4 -d ' ' | head -n 1)
         
          # add: application-identifier = <string>${TESTFLIGHT_TEAMID}.${PREFLIGHT_BUNDLE_PREFIX}.${BUNDLE_ID}</string>
          plutil -replace 'application-identifier' -string "${TESTFLIGHT_TEAMID}.${PREFLIGHT_BUNDLE_PREFIX}.${BUNDLE_ID}" "../../sandbox-ios.entitlements"

          codesign --force -v --options runtime --generate-entitlement-der --preserve-metadata="identifier,entitlements,flags" -s "${SIGNID}" "Payload/${PRODUCT_NAME}.app"/Frameworks/*.framework
          codesign --entitlements "../../sandbox-ios.entitlements" --force -v --options runtime --generate-entitlement-der --preserve-metadata="identifier,entitlements,flags" -s "${SIGNID}" "Payload/${PRODUCT_NAME}.app"

          # re-create the archive with the signed app for submission
          ditto -c -k --sequesterRsrc --keepParent "Payload" "${FAIR_APP_ARTIFACT}-iOS.ipa"

          rm -rf Payload/

          cd -

          fastlane beta --verbose

          # TODO: separate build and uploads phases
          #fastlane pilot upload
          #fastlane deliver --skip_screenshots --force

          #cp $FAIRGROUND.xcconfig $FAIRGROUND.xcconfig.clean
          #mv $FAIRGROUND.xcconfig.clean $FAIRGROUND.xcconfig

      - name: "Build macOS App"
        if: inputs.target_macos == true && steps.platforms.outputs.macos == 'enabled'
        run: |
          xcodebuild archive \
            -workspace "App.xcworkspace" \
            -jobs 1 \
            -configuration Release \
            -scheme "${APP_TARGET}" \
            -sdk "macosx" \
            -destination "platform=macOS" \
            -archivePath "staging/.${FAIR_APP_ARTIFACT}-macOS.xcarchive" \
            CODE_SIGNING_REQUIRED=YES \
            CODE_SIGNING_ALLOWED=YES \
            AD_HOC_CODE_SIGNING_ALLOWED=YES \
            CODE_SIGN_IDENTITY="-" \
            DEVELOPMENT_TEAM="" \
            CODE_SIGN_IDENTITY="-" \
            OTHER_CODE_SIGN_FLAGS="--deep --timestamp=none" \
            OTHER_LIBTOOLFLAGS="-D" \
            FAIRAPP_PRODUCT_NAME="${PRODUCT_NAME}"
          shasum -a 256 "staging/.${FAIR_APP_ARTIFACT}-macOS.xcarchive/Products/Applications"/*.app/Contents/MacOS/*

          echo '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>method</key><string>mac-application</string><key>signingStyle</key><string>automatic</string></dict></plist>' > "staging/exportOptions.plist"

          xcodebuild \
            -exportArchive \
            -archivePath "staging/.${FAIR_APP_ARTIFACT}-macOS.xcarchive" \
            -exportPath "staging/" \
            -exportOptionsPlist "staging/exportOptions.plist"

          codesign --verify --verbose=5 "staging/${PRODUCT_NAME}.app"
          codesign -dv --verbose=5 "staging/${PRODUCT_NAME}.app"
          codesign -d --entitlements - "staging/${PRODUCT_NAME}.app"
          ditto -c -k --sequesterRsrc --keepParent "staging/${PRODUCT_NAME}.app" "staging/${FAIR_APP_ARTIFACT}-macOS.zip"

          # show the binary checksum
          openssl sha256 "staging/${PRODUCT_NAME}.app/Contents/MacOS/"*
          openssl sha256 "staging/${FAIR_APP_ARTIFACT}-macOS.zip"

          rm -rf "staging/${PRODUCT_NAME}.app" # cleanup


      # compare the contents of the PR's un-trusted artifacts with
      # the contents of the base fair-ground's trusted artifacts
      - name: "Generate macOS fairseal"
        if: inputs.target_macos == true && steps.platforms.outputs.macos == 'enabled'
        env:
          GITHUB_TOKEN: ${{ secrets.APP_FAIR_BOT_TOKEN }}

        run: |
          # build the URL for the GitHub download artifact
          ZIPURL="https://github.com/${ORGNAME}/App/releases/download/${{ steps.get_semver_tag.outputs.semver_tag }}/${FAIR_APP_ARTIFACT}-macOS.zip" 

          echo "Generating fairseal for: $ZIPURL"

          mkdir -p staging/.artifact_stash/
          mv -f staging/*.ipa staging/.artifact_stash/ || true # don't seal the ipa when sealing macOS

          mkdir -p staging/untrusted/

          # if the seals match, we indicate success by publishing
          # the SHA256 for the release's pull request;
          # client apps will use this hash to verify that the untrusted
          # release artifact that is downloaded matches the release
          # artifact that was created in the trusted environment
          $FAIRTOOL fair fairseal \
            --verbose \
            --hub "github.com/${{ inputs.fairground }}" \
            --base-repo "App" \
            --token "${{ secrets.APP_FAIR_BOT_TOKEN }}" \
            --org "${ORGNAME}" \
            --fairseal-key "${{ secrets.APP_FAIR_FAIRSEAL_KEY }}" \
            --trusted-artifact "staging/${FAIR_APP_ARTIFACT}-macOS.zip" \
            --untrusted-artifact "staging/untrusted/${FAIR_APP_ARTIFACT}-macOS.zip" \
            --disassembler=/usr/bin/otool \
            --permitted-diffs 0 \
            --retry-duration 600 \
            --artifact-url "$ZIPURL" \
            --artifact-staging "staging/" \
            --fair-properties "$FAIRGROUND.xcconfig" \
            --accent-color "Assets.xcassets/AccentColor.colorset/Contents.json" \
            --project .

          mv -f staging/.artifact_stash/* staging/ || true # restore stash

      - name: "Close Pull Request"
        # Pull Requests are always closed after the integrate-release phases.
        # Re-builds can be initiated by re-opening the PR or making a new one.
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh pr close ${{ github.event.pull_request.html_url }}

      - name: "Publish Catalog"
        env:
          GITHUB_TOKEN: ${{ secrets.APP_FAIR_BOT_TOKEN }}
        run: |
          gh workflow --repo "${{ inputs.fairground }}/${{ inputs.fairground }}.github.io" run "catalog.yml"

      - name: "Upload Reproducible Build"
        # upload the trusted artifacts for each build for reproducible-builds
        uses: actions/upload-artifact@v2
        if: always()
        with:
          path: staging

